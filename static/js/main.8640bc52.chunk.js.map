{"version":3,"sources":["logo.svg","displaydate.js","ListKeys.js","ReactForms.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","DisplayDate","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","timenow","Date","toLocaleString","toggleTimer","pageId","bind","assertThisInitialized","setState","clearInterval","timerId","setNow","_id","console","log","dateStr","getDate","toggleStr","getToggleState","react_default","a","createElement","onClick","Component","ListItem","value","React","ListKeys","names","name","map","key","ListKeys_ListItem","toString","ReactForms","username","fruit","handleChange","handleSelectChange","handleSubmit","event","target","alert","preventDefault","type","onChange","selected","App","className","displaydate","src_ListKeys","src_ReactForms","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8640bc52.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\n class DisplayDate extends Component {\r\n   \r\n     constructor(props){\r\n         super(props);\r\n         this.state = { timenow : new Date().toLocaleString(), toggleTimer: true, pageId: 0 };\r\n         this.toggleTimer = this.toggleTimer.bind(this);\r\n     }\r\n     toggleTimer(){\r\n\r\n        this.setState({toggleTimer: !this.state.toggleTimer});\r\n        if(this.state.toggleTimer)\r\n            clearInterval(this.timerId);\r\n        else\r\n           this.setNow();\r\n\r\n     }\r\n     changePageId(_id){\r\n         this.setState({pageId : _id});\r\n     }\r\n     getToggleState(){\r\n         return this.state.toggleTimer;\r\n     }\r\n     setNow(){\r\n         this.setState({timenow : new Date().toLocaleString()});\r\n     }\r\n     componentDidMount(){\r\n        console.log(\"Compoent Did mount\");\r\n        //this.timerId = setInterval(() => this.setNow(),1000);\r\n\r\n     }\r\n     componentDidCatch(){\r\n         console.log(\"Component Did Catch\");\r\n     }\r\n     componentWillMount(){\r\n         console.log(\"Component Will Mount\");\r\n         \r\n     }\r\n     componentDidUpdate(){\r\n         console.log(\"Component Did update\");\r\n         \r\n     }\r\n     componentWillReceiveProps(){\r\n         console.log(\"Component will receive props\");\r\n     }\r\n     componentWillUnmount(){\r\n         console.log(\"Component Will unmount\");\r\n     }\r\n     componentWillUpdate(){\r\n         console.log(\"Component will update\");\r\n     }\r\n     \r\n    getDate(){\r\n       //setInterval( this.setNow(), 1000);\r\n       return this.state.timenow;\r\n    }\r\n  render() {\r\n  \r\n    const dateStr = this.getDate();\r\n    const toggleStr = this.getToggleState();\r\n    console.log(toggleStr);\r\n    console.log(\"Render\");\r\n    const renderPage = <div>\r\n    <h3>{dateStr} / {toggleStr.toLocaleString()}</h3>\r\n    <button onClick={this.toggleTimer}>Pauce/Resume</button>\r\n   </div>;\r\n\r\n    return (\r\n           renderPage\r\n\r\n      \r\n\r\n\r\n\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default DisplayDate;","import React from 'react';\r\n\r\n\r\n\r\n\r\nclass ListItem extends React.Component{\r\n   constructor(props){\r\n       super(props);\r\n   }\r\n\r\n   render(){\r\n      return <li>{this.props.value}</li>\r\n   }\r\n\r\n}\r\nclass ListKeys extends React.Component{\r\n    \r\n    \r\n    constructor(props){\r\n        super(props);\r\n        this.names = [{ name : \"Surya\"},{ name: \"Ramu\" }, {name: \"Pavan\"}, {name: \"Gopal\"}, {name: \"Venkat\"}];\r\n\r\n    }\r\n    \r\n      render(){\r\n        return <h1>List Keys <ul>\r\n        \r\n        \r\n        {\r\n            this.names.map((key) =>\r\n        <ListItem key={key.name.toString()}\r\n                  value={key.name} />\r\n\r\n             )\r\n      }\r\n        \r\n        \r\n        </ul></h1>\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default ListKeys;","import React from 'react';\r\n\r\nclass ReactForms extends React.Component{\r\n    \r\n    constructor(props){\r\n        super(props);\r\n        this.state = {username : '', fruit: 'lime'}\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSelectChange = this.handleSelectChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    handleChange(event){\r\n        this.setState({username: event.target.value});\r\n    }\r\n    handleSelectChange(event){\r\n        this.setState({fruit : event.target.value});\r\n    }\r\n    handleSubmit(event){\r\n        alert('A name was submitted: ' + this.state.username);\r\n        event.preventDefault();\r\n    }\r\n    getSubmittedData(){\r\n        return (this.state).toString();\r\n    }\r\n\r\n   render(){\r\n     return(\r\n        <div>\r\n        <input type=\"text\" value={this.state.username} onChange={this.handleChange}/>\r\n        <div>{this.state.username} - {this.state.fruit}</div>\r\n        <select value={this.state.fruit} onChange={this.handleSelectChange}>\r\n                    <option value=\"grapefruit\" selected>Grapefruit</option>\r\n                    <option value=\"lime\">Lime</option>\r\n                    <option selected value=\"coconut\">Coconut</option>\r\n                    <option value=\"mango\">Mango</option>\r\n        </select>\r\n\r\n        <input type=\"submit\" value=\"Submit\" onClick={this.handleSubmit} />\r\n        </div>\r\n\r\n     );\r\n\r\n   }\r\n\r\n\r\n}\r\nexport default ReactForms;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport DisplayDate from './displaydate';\nimport ListKeys from './ListKeys';\nimport ReactForms from './ReactForms';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        \n          <DisplayDate />\n          <ListKeys   />\n          <ReactForms />\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}